First Commans
-------------------------------------
> CTRL + T (To open Terminal)
> echo shiva
> cal
> cal 2020
> cal -y
> date
> clear
> CTRL + l
> history
> !07
> !116
> !! (to run recent cmd)
> history -c
> exit or CTRL + D (To close the terminal)
> command,terminal and shell
> Different type of shell (bhash)
> echo $PATH (To see shel path)
> shblam (Command not found) 
> which date (date command is actually located /usr/bin/date) that why the cmd is executed
> which echo (/usr/bin/echo)
> which which (/usr/bin/which)
> command option input
   date   -a -b -c -d -e -f (Order does not matter)
   date   -abcdef           (Order does not matter)
   date   --option1  --option2  --option3 (Can't chain like short form)
>  cal -A 1 12 2017 (A and B are options and have their own input 1) 12 and 2017 are input
>  cal -B 1 12 2017 (A and B are options and have their own input 1) 12 and 2017 are input
>  man -k vmstat (vmstat is search term)
>  man 8 vmstat
>  which [-a | -f] <something> (| means select one from the two optopns)
   ---which -af whis is wrong

Command Input + Output
----------------------------------
> standard Input(0) Data stream
> Srandard Output(1) Data stream
> Srandard Error(2) Data stream
> Command Arguments
> We can connect two data stream from ouput of one command to input of another command known as piping 

Redirection statndard Output
---------------------------------
> cat 1> output.txt  (overwrite the file)
> cat 1>> output.txt (append to the file)
> cat > output.txt   (other syntaxt)
> cat >> output.txt   (other syntaxt)

Redirection statndard Error
---------------------------------
> cat 2> error.txt
> cat 2>>error.txt
> cat -k bla 2>>error.txt
> cat 1>> output.txt 2>error.txt
> cat >> output.txt 2>error.txt (Other syntax you can remove 1 but still you need to mention 2 for standard error)
> cat 0< input.txt 1> hello.txt
Piping Part 1
-------------------------------
> cut date.txt  --delimiter " " --field 1
> cut date.txt  --delimiter=" " --field=1 (We can also use = )
> cut date.txt  --delimiter " " --field 1,2
> cut date.txt  --delimiter "U" --field 1 -s
> vmstat | cut  --delimiter " " --field 1,2,3,4,5,6>vmstat.txt
> date |cut --delimiter " " --fields 1 | command -option args |
> date > date.txt |cut --delimiter "" --field 1 
(Note: Here the redirection happend first so you can not pipe the output of date command to cut 
so the data can not go to two places at once. How to fix? Need to use "tee" command )
Piping Part 2
-------------------------------
> date|tee fullday.txt|cut --delimiter=" " --field=1
> date|tee fullday.txt|cut --delimiter=" " --field=1 1>today.txt
> vmstat 1 3|tee vmstat.txt| cut --delimiter=" " --field=1,2 1>process.txt 
 Key Point:
  1. Once you redirect the pipeline you can not continue
  2. If you want to continue the pipline use "tee" command

Piping Part 3 Using xargs
-----------------------------------
Part 1>>>>> Piping is all about connection the standard out of one command 
	    to standard input of another command 
Part 2>>>>> How you can pass data through your pipeline but also take snapshot 
	    of the data as it flows through and save that snapshot into a file using "tee' command
Part 3>>>>> Piping is all about connection the standard out of one command to standard input
	    of another command . No all command accept standard input some only accepts command line arguments.
            And to handle this scenario "xargs" comes in. The "xargs" allows you to convert the pipes data into 
	    command line arguments for the commands that only accept arguments. So that you can 
            keep your pipe going withou breaking 
            
	    xargs - will conver the data from standard input into command line argument

> date |xargs echo
> date |xargs echo "hello"
> date |cut --delimiter=" " --field=1|xargs echo
> cat deletelist.txt |xargs rm

Aliases
-----------------------------------
To be updated once reach home and using the laptop


Linux File System
----------------------------------------
1. Everything in linux start from root
2. No harddisk partision

Navigating File System part 1
------------------------------------------
> pwd
> ~  (Represent the current user home directory)
> ls (list directory content. 
      Note: ls cant accept standard input so you can't pipe it. In "ls" everything is command line arguments

> ls /home/karthik
> ls ~
> ls -F (different between files and folder/ )
> ls -F>list.txt
> ls -l (long form format)
> ls -lh (human readable form about file size)
> ls -la (x-ray --show all file in the file directory including the hidden file)
> ls /etc /home /bin  (It list file from etc home bin directory in one go. But better use wild card )
> ls >out.txt 
> ls {jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec}_{2017..2022}>out.txt

Navigating File System part 2
------------------------------------------
> cd /home/ziyad/downloads
> cd ~/downloads
> cd ~/Desktop
> cd (This will take you to the home directory no matter whereever your are in the file system)
> cd . (refer the current folder)
> cd .. (go back to one level up to the parant folder)
> cd /  (This will take you to the base/root directory no matter whereever you are in the file system)

Navigating File System part 3
------------------------------------------
1. Learn aout Tab and double Tab to auto completion
2. Go to the path using GUI and right-click and click open in terminal

File Extensions in Linux
--------------------------------------------
1. In Linux file extension don't matter. Unlike windows, Linux does't determine file type using the file extension.
   But instead linux read a piece of code inside at the top of the file. And that piece of code is known as header.
   An it serves as label for linux to read. Linux read that label and it knows the file type. So just change the file extension 
   dont change that header.

   Note: The programms that are installed on top of the operating system PDF viewer or Libra Office and stuff like that they need file to have 
         specific extension inorder to open them. But operating system itself does not care. 

[xxxxxxxxx]# file rms-logs_5thOct.txt
rms-logs_5thOct.txt: UTF-8 Unicode text
[xxxxxxxxx]# file uams_namespace_def.yml
uams_namespace_def.yml: ASCII text
[xxxxxxxxx]# file poi.json
poi.json: empty
[xxxxxxxxxx]# file nugetv3_workaround.sh
nugetv3_workaround.sh: Bourne-Again shell script, ASCII text executable

Wildcards 
------------------------------------------
1. * match anything regardless of length
2. ? match anything but the length is one
3. [] restict what has to go inside. ls file[1234567890].txt
4. [0-9][a-z][A-Z]


> ls /etc /home /bin 
> ls * (Very powerfull command to see all the files in root to get quick over about the system)
> ls *.txt
> ls file?.txt
> ls file[1234567890].txt
> ls file[0-9][A-z][a-z].txt
> ls file[0-9ABC].txt
> ls file[0-9abc].txt
> ls | less -N

Creating Files and Directories Part 1
--------------------------------------
> touch file1
> touch ~/Document/distantfile
> echo "Hello" > hello.txt


> mkdir newfolder
> mkdir ~/Pictires/Holiday

> mkdir -p bla/thing/shiblam (P option will create the entire path)
> mkdir happy birthday (Dont use space in naming folder and file instead use "_" )

Creating Files and Directories Part 2 (Power of braces {})
--------------------------------------
> mkdir {jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec}_{2017,2018,2019,2020,2021,2022}
> mkdir {jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec}_{2017..2022}
> touch {jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec}_{2017..2022}/file{1..100}

> mkdir -p delfolder/deleteme{1,2,3} 
> touch delfolder/deleteme{1,2,3}/file{1,2,3}

> This slide needs to be revisited to create file inside the folder
> ls {jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec}_{2017..2022}>out.txt
> ls >out.txt
> touch file{A,B,C}.txt
> touch file{A..C}.txt
> touch file{1..100}.txt

Deleting Files and Folders (Part 1)
-----------------------------------

> rm deleteme
> rm Documents/deleteme
> rm file1.txt Document/file2.txt /Download/file3.txt

> rm *.txt
> rm file*
> rm *2*
> rm *.jpg
> rm *[2,3]*

Deleting Files and Folders (Part 2)
-----------------------------------
> rm -r Deletefolder
> mkdir delfolder/delitem{1,2,3}
> rm -ri deletefolder
> rmdir (remove all empty folder)
> rmdir delfolder/* (remove everything in delfolder which is empty. so folder 1 & 2 stay and folder 3 will be removed)

Copy and Past File
------------------------------------
> cp file1.txt file2.txt
> cp file1.txt file2.txt destination/
> cp destination/* .
> cp -r copymefolder/ destination (Copy and Past the folde to destination)

Moving and Renaming files and Directoties
-----------------------------------------
> mv oldfile.txt newfile.txt
> mv oldefolder/ newfolder
> mv newfolder/ /home/copyme
> mv newfilder/ ~/Documents/
> mv ~/Documents/newfolder ./jackpot (Move the rename folder and also rename the folder as jackpot)

Editing Files usnin nano (Part - 1)
-----------------------------------
How to install nano
> apt-get update
> apt-get install nano
> nano dairy.txt
> ^ symbol means CTRL
> M symbol means ATL

we see the writeout option
we see the readfile option
we see the whereis option
we see the replace option

Editing Files usnin nano (Part - 2)
-----------------------------------

setup the spell check in nano

> nano /etc/nanorc

search the below text using wheris option ^W
#set speller "aspell -x -c"

remove the # symbole and remove the leading space and writeout/save the file
set speller "aspell -x -c"

The Locate Command - Part 1
---------------------------------
> locate *.conf
> locate -i *.conf (search based on case insensetive search)
> locate -i --limit 3 *.conf (limite the output to 3 results)
> locate -i --limit 5 *.conf (limite the output to 5 results)
> locate -i --limit 10 *.conf (limite the output to 10 results)
> locate -S (To get the information about the database) 
> locate -S > ~/Desktop/database_before.txt
> locate -e *.conf (-e option will check the file is exist or not before reporting)
> locate --existing *.conf (-e option will check the file is exist or not before reporting)
> locate --follow *.conf
> locate --existing --follow -i --limit 5 *.conf

The Locate Command - Part 2 (Update DB)
---------------------------------------
> sudo updatedb
> locate test.txt
> locate -S >database_after.txt


The Find Command part -1 
-------------------------
Difference between Locat and Find

1. Find command list out the files and folders. But the list command only list the files
2. Find command does not need the database to work. But the locat command the database and it should be always upto date 
3. Find command not use the database and it operate directly on file system. So it will be bit slow compare to locate command
3. Find command will search deeper and deper with infinite dept. It start with the current directory or whereever you give it 


> find (list every file and folder in our home directory and below it)
> find / (Pls dont run it will slow your sysyem)
> find /etc
> find /home/ziyad/Documents
> find /home/

The Find Command part -2
--------------------------

1. How to control the search depth
> find . -maxdepth 1
> find . -maxdepth 2
> find . -maxdepth 3
> find . -maxdepth 4
> find . -maxdepth 5

By default find comand list both files and folder. if you only want the files use "-type f" option.if you only want the files use "-type d" option.
> find . -type f
> find . -type d
> find . -maxdepth 1 -type d 
> find . -maxdepth 2 -type d 
> find . -maxdepth 3 -type d 
> find . -maxdepth 4 -type d 
> find . -maxdepth 5 -type d 

> find . -maxdepth 1 -type f
> find . -maxdepth 2 -type f 
> find . -maxdepth 3 -type f 
> find . -maxdepth 4 -type f 
> find . -maxdepth 5 -type f

> find /etc -maxdepth1 type f


The Find Command part -3 (search file using name)
--------------------------------------------------
> find . -name "*5.txt"
> find . -name "*.txt"
> find . -maxdepth 2 -name "*.txt"
  Note: You can not use brace {} expansion inside the name option. Just a side note
> find . -maxdepth 2 -iname "*.TXT" (Case insensetive search)

> find / -type f -size +100k
> find / -type f -size -100k
> find / -type f -size +100k |wc -l
> find / -type f -size -100k |wc -l
> find / -type f -size +100k -size -5M|wc -l
> find / -type f -size -100k -o -size -5M|wc -l


The Find Command Part -4 (use -exe and -ok option )
-----------------------------------------------------
> find / -type f -size +10k -size -500M  -exec cp {} ./copy_here \; (this command will copy the files to copy_here folders
> find / -type f -maxdepth 4 -size +10k -size -500M  -exec cp {} ./copy_here \; (this command will copy the files to copy_here folders
> find / -type f -maxdepth 4 -size +10k -size -500M  -ok cp {} ./copy_here \; (This ok option will ask confirmation for every file. press Yes or No. If you want to cancel press CTRL+C)

The Find Command Part -5 (Find the needle from haystack)
-------------------------------------------------------------
> touch haystack/folder$(shuf -i 1-50 -n l)/needle.txt (This command is not working need to revisit)
> find -type f -name "needle.txt"
> find -type f -name "needle.txt" -exec mv WHAT WHERE \;
> find haystack/ -type f -name "needle.txt" -exec mv {}  ./home/copy_here \;

Viewing Files Part -1
---------------------
> cat file1.txt (To open a file1.txt and see what is inside)
> cat file2.txt (To open a file2.txt and see what is inside)
> cat file3.txt (To open a file3.txt and see what is inside)
> cat file4.txt (To open a file4.txt and see what is inside)
> cat file5.txt (To open a file5.txt and see what is inside)

cat is used for files stick together or concat 

> cat file1.txt file2.txt file3.txt file4.txt file5.txt
> cat file1.txt file2.txt file3.txt file4.txt file5.txt >beautiful.txt
> cat file[1-5].txt > beautiful.txt

cat command is very useful when you work with multiple video and audio files. 
It helps you to combine all the files into one long file

tac command read the whole file in reverse. It read last line first and first line last. but
it did not affect any text

> echo "abc">>aplha.txt
> echo "def">>alpha.txt
> tac alpha.txt
  def
  abc

> cat file[1-5].txt|tac
> cat file[1-5].txt|tac >>alphareverse.txt
> tac myfile.mp3 > myreversedfile.mp3


rev command revers the each char of the line

>cat file[1..5].txt |rev
  olleh
  ereht
  uoy
  lufituaeb
  elopep
> cat file[1-5].txt |tac |rev

Viweing Files Part -2
----------------------
less command help to open large file with scrooling feature. Use UP and DOWN arrow to scrool
> less /etc/cups/cups-browsed.conf
This is very usefull 

> cat /etc/cups/cups-browsed.conf | less
> find -name "*.txt" |less
> cat hello[1-5].txt |head (head command show first 10 lines by default)
> cat hello[1-5].txt |head -n 2
> cat hello[1-5].txt |head -n 2 |tac
> cat hello[1-5].txt |head -n 2 >>temp.txt
> cat /etc/cups/cups-browsed.conf |wc -l
  673 lines

> head -n 20 /etc/cups/cups-browsed.conf
> head -n 20 /etc/cups/cups-browsed.conf |wc -l

tail command works the same way how head but it works brom bottom

> tail-n 20 /etc/cups/cups-browsed.conf
> tail-n 20 /etc/cups/cups-browsed.conf |wc -l

Fileter the line using head and tail command. The below command will extract specific lines

> head -n 20 /etc/cups/cups-browsed.conf|tail -n 1
> head -n 20 /etc/cups/cups-browsed.conf|tail -n 3 (cut the 18 ,19 and 20 line)
> find |tail -n 3
> find |tail -n 3 > ~/home/Desktop/export.txt

Sort with letters A-Z
----------------------
> cat 1>words.txt
  c
  b
  a
> sort words.txt
  a
  b
  c
> sort word.txt > output.txt
> sort word.txt | tac (Method 1)
  c
  b
  a
> sort -r word.txt  (Method 2 is effective way)
  c
  b
  a
> sort word.txt |less

Sort with numbers 0-9
-----------------------
> root@af0c34903159:/home/copy_here# cat file2.txt
  9
  8
  7
  6
  5
  4
  3
  2
  1
  10
  01
  999
  1000
> root@af0c34903159:/home/copy_here# sort file2.txt (Sort just by Digit)
  01
  1
  10
  1000
  2
  3
  4
  5
  6
  7
  8
  9
  999
> root@af0c34903159:/home/copy_here# sort -n file2.txt (Sort by the value)
  01
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10
  999
  1000
> root@af0c34903159:/home/copy_here# sort -nr  file2.txt (Rever sort by value)
  1000
  999
  10
  9
  8
  7
  6
  5
  4
  3
  2
  1
  01
> root@af0c34903159:/home/copy_here# cat 1>number.txt
	8
	8
	99
	99
	7
	7
	6
	6
	5
	5
	4
	4
	3
	3
	2
	2
	1
	1
	^C
> root@af0c34903159:/home/copy_here# sort -u number.txt (get unique value)
	1
	2
	3
	4
	5
	6
	7
	8
	99
Sorting Part 2
---------------
root@af0c34903159:/# ls -l /etc |head -n 20
total 272
-rw-r--r-- 1 root root    3028 Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root    4096 Nov 23 07:36 alternatives
drwxr-xr-x 1 root root    4096 Oct  8 01:31 apt
-rw-r--r-- 1 root root    2319 Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root     367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root       0 Nov 10 08:48 cd
drwxr-xr-x 2 root root    4096 Oct  8 01:31 cron.d
drwxr-xr-x 1 root root    4096 Nov 16 02:05 cron.daily
-rw-r--r-- 1 root root    2969 Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root      13 Dec  5  2019 debian_version
drwxr-xr-x 2 root root    4096 Oct  8 01:34 default
-rw-r--r-- 1 root root     604 Sep 15  2018 deluser.conf
drwxr-xr-x 1 root root    4096 Oct  8 01:31 dpkg
-rw-r--r-- 1 root root     685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root     106 Oct  8 01:34 environment
-rw-r--r-- 1 root root      37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root    2584 Feb  1  2020 gai.conf
-rw-r--r-- 1 root root     446 Oct  8 01:31 group
-rw-r----- 1 root shadow   374 Oct  8 01:31 gshadow


> root@af0c34903159:/# ls -l /etc |head -n 20 |sort -k 5n
-rw-r--r-- 1 root root       0 Nov 10 08:48 cd
total 272
-rw-r--r-- 1 root root      13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root      37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root     106 Oct  8 01:34 environment
-rw-r--r-- 1 root root     367 Apr 14  2020 bindresvport.blacklist
-rw-r----- 1 root shadow   374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root     446 Oct  8 01:31 group
-rw-r--r-- 1 root root     604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root     685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root    2319 Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root    2584 Feb  1  2020 gai.conf
-rw-r--r-- 1 root root    2969 Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root    3028 Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root    4096 Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root    4096 Nov 23 07:36 alternatives
drwxr-xr-x 1 root root    4096 Oct  8 01:31 apt
drwxr-xr-x 1 root root    4096 Oct  8 01:31 dpkg
drwxr-xr-x 2 root root    4096 Oct  8 01:31 cron.d
drwxr-xr-x 2 root root    4096 Oct  8 01:34 default

> root@af0c34903159:/# ls -l /etc |head -n 20 |sort -k 5nr
drwxr-xr-x 1 root root    4096 Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root    4096 Nov 23 07:36 alternatives
drwxr-xr-x 1 root root    4096 Oct  8 01:31 apt
drwxr-xr-x 1 root root    4096 Oct  8 01:31 dpkg
drwxr-xr-x 2 root root    4096 Oct  8 01:31 cron.d
drwxr-xr-x 2 root root    4096 Oct  8 01:34 default
-rw-r--r-- 1 root root    3028 Oct  8 01:31 adduser.conf
-rw-r--r-- 1 root root    2969 Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root    2584 Feb  1  2020 gai.conf
-rw-r--r-- 1 root root    2319 Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root     685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root     604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root     446 Oct  8 01:31 group
-rw-r----- 1 root shadow   374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root     367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root     106 Oct  8 01:34 environment
-rw-r--r-- 1 root root      37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root      13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root       0 Nov 10 08:48 cd
total 272

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 5nr (When we use h option n option will not work)
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
total 272K

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 5hr (Use this method when use h option in ls cmd. You can't use n and h option together like sort -k 5nhr)
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
total 272K
 

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 6M (sort by month)
total 272K
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 6Mr
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
total 272K

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 2n
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
total 272K

> root@af0c34903159:/# ls -lh /etc |head -n 20 |sort -k 2nr
total 272K
drwxr-xr-x 2 root root   4.0K Oct  8 01:31 cron.d
drwxr-xr-x 2 root root   4.0K Oct  8 01:34 default
-rw-r----- 1 root shadow  374 Oct  8 01:31 gshadow
-rw-r--r-- 1 root root      0 Nov 10 08:48 cd
-rw-r--r-- 1 root root     13 Dec  5  2019 debian_version
-rw-r--r-- 1 root root     37 Oct  8 01:31 fstab
-rw-r--r-- 1 root root    106 Oct  8 01:34 environment
-rw-r--r-- 1 root root    367 Apr 14  2020 bindresvport.blacklist
-rw-r--r-- 1 root root    446 Oct  8 01:31 group
-rw-r--r-- 1 root root    604 Sep 15  2018 deluser.conf
-rw-r--r-- 1 root root    685 Feb 14  2020 e2scrub.conf
-rw-r--r-- 1 root root   2.3K Feb 25  2020 bash.bashrc
-rw-r--r-- 1 root root   2.6K Feb  1  2020 gai.conf
-rw-r--r-- 1 root root   2.9K Aug  3  2019 debconf.conf
-rw-r--r-- 1 root root   3.0K Oct  8 01:31 adduser.conf
drwxr-xr-x 1 root root   4.0K Nov 16 02:05 cron.daily
drwxr-xr-x 1 root root   4.0K Nov 23 07:36 alternatives
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 apt
drwxr-xr-x 1 root root   4.0K Oct  8 01:31 dpkg

grep part -1
-------------
gadsby poem not wantains letter e example
> grep "Txn01_Login" in result.txt (e is the search value not an option. It will highlight the line containes e)
> grap -c "Txn01_Login" result.txt ( It will print how many lines contains Txn01_Login)
> wc -l gadsby.txt 
  1914 (It contails 1914 lines)
> grep -i "txn01_login" in result.txt (ignore case sensitibe)
> grep -ic "txn01_login" in result.txt (ignore case sensitibe and print how many lines contain the search text)
> grep -ic e gadsby_manuscript.txt
  0
> grep -ic "our boys" gadsby_manscript.txt
  9 (9 lines contains the text our boys)

> grep -i "our boys" gadsby_manscript.txt
  Note: It shows shows all the 9 lines

Note: If you want to search with single char no need to use double quotes

grep using v option. It inver the search (!=)
----------------------------------------------
> grep -v e gadsby_manuscript.txt (search all the lines that dont have the letter e)


grep part -2
-------------

To be updated skiping this section and going to file Arichiving

File Archiving + Compression
------------------------------
1. Tarball is way of butting you files in a bag. When you put file into tarball means you are putting all you files in one place
2. Tarball itself does't do any compression. But we can compress tarball using compression algotithem

2 Step Peoce4ss
------------------
1. Make tarball
2. compress tarball

Create tarball
--------------
> tar -cvf ourarchive.tar file[1-3].txt
  c option means create
  v option means verbose talk to me . dont do silently
  
> ls -l |grep .tar
  Note: The size of the tarball is 20K. However each individua file size is 5k (3 files =15k). Means the tarball has its own weight/size.
        Once we compress the tarball the individual size of the file will go down.
> file ourarchive.tar
  ourarchive.tar: POSIX tar archive (GNU)

> tar -tf ourarchive.tar (To see what is inside tarball)
   t option is test what is inside
   f option is necessery to pass the file to tar

> tar -xvf ourarchive.tar (To extract tar)
   x option  means extract
   v option means verbose. Means just talk to me don't do silently
   f option necessary bcz passing files

Compression Algorithm
------------------------
1. gzip - Faster & less compression power
2. bzip2 - slow & High comprssion power (If you see the real power only the file size is too big)

gzip
-------------------------------------
> gzip ourarchive.tar
> ls -lh (to see the size)

How to get the tar ball back
> gunzip ourarchive.tar.gz
> file ourarchive.tar

bzip
---------------------------------
> bzip2 ourarchive.tar
> ls -lh (to see the size)

How to get the tar ball back
> bunzip2 ourarchive.tar.bz2
> ls -lh

Zipfiles (Win and Mac)
---------
> zip ourthing.zip file1.txt file2.txt file3.txt

compress and archive in one go
---------------------------------
> tar -cvzf ourarchive.tar.gz file1.txt file2.txt file3.txt
> tar -cvjf ourarchive.tar.gz.bz2 file1.txt file2.txt file3.txt

Extract in one go
-----------------------

> tar -xvzf ourarchive.tar.gz
> tar -xvjf ourarchive.tar.gz.bz2


GNU
-----
1. 1991 - GNU Almost completed. Except only piece is missing called kernal
2. Kernal is a interface layer is responsible for allocating resource on the computer Hardawre that is required by the Software that is running.

> uname
> uname -o
> uname -m(to see its 32 bit or 64 bit)
  x86_64
> lsb_release -a
> apt (Its a package manager used in ubuntu. 
  a- Advanced
  p- Package
  t- tool
search packages from repo
-------------------------------
> apt-cache search docx
> apt-cache search docx | grep text
> apt-cache search jmeter

> apt-cache show doxc2txt |less
> apt-cache search "web serve"|less
> cd /var/lib/apt/lists (to see the cache)
> ls | less -N

> sudo apt-get updated (Update the cache list from the internet)
> sudo apt-get upgrade (to update the every single piece of software to the latest version)


Shell Script Basic
--------------------------
> which bash

#ECHO
------------------------
echo Hello World!

#VARIABLES
-----------------------
#Uppercaseby convention
# Letters,numbers,underscores

NAME="Brad"
echo "My name is $NAME"
echo "My name is ${NAME}"

# USER INPUT
----------------------
read -p "Enter your name: NAME
echo "Hello $NAME, nice to meet you

# SIMPLE IF STATEMENT
--------------------

NEME="Brad"

if ["$NAME" == "Brad" ]
then
 echo "your name is Brad"
fi



# IF-ELSE
--------------

NEME="Jack"

if ["$NAME" == "Brad" ]
then
 echo "your name is Brad"
else
 echo "Your name is Not Brad"
fi

# ELSE-IF(elif)
-----------------

NEME="Jack"

if [ "$NAME" == "Brad" ]
then
 echo "your name is Brad"
elif [ "$NAME=="Jack" ]
then
 echo "You name is Jack"
else
 echo "Your name is Not Brad or Jack"
fi

# COMPARISION
---------------
# val1 -eq val2 Return true if the values are equal
# val1 -ne val2 Return true if the values are not equal
# val1 -gr val2 Return true if val1 is greater than val2
# val1 -ge val2 Return true if the val1 is greater than or equal to val2
# val1 -lt val2 Return true if val1 is less than val2
# val1 -le val2 Return true if val1 is less than or equal to val2

NUM1=3
NUM2=5

if [ "$NUM1 -gr "$NUM2" ]
then
 echo "$NUM1 is greater than $NUM2"
else
 echo "$NUM1 is less than $NUM2"
fi

# FILE CONDITIONS
----------------------
FILE="test.txt"
if [ -f "$FILE" ]
then
 echo "$FILE is a file"
else
 echo "$FILE is nOT a file"
fi

# -d file True if file is a directory
# -e file True if the file exists (note that this is not particularly portable. thus -f is generally used)
# -f file True if the provided string is a file
# -g file True if the group id set ona file
# -r file True if the file is readable
# -s file True if the file has a non-zero size
# -u True if the user id is set on a file
# -w True if the file is writable
# -x True if the file is an executable

# CASE STATEMENTS
---------------------
read -p "Are you 21 or Over ? Y/N" ANSWER
case "$ANSWER" in
 [yY] | [yY][eE][sS])
 echo "You can have a bee :)"
 ;;
 [nN] | [nN] [oO] )
 echo "Sorry , no drinking"
 ;;
 *)
 echo "Please enter y/Yes or n/No"
 ;;
esac

# SIMPLE FOR LOOP
-------------------
NAMES="Brad Kevin Alice Mark"
for NAME in $NAMES
 do 
   echo "Hello $NAME"
 done


# FOR LOOP TO RENAME FILES
------------------------------
FILES


























































  





 










 
















                                                                                                                                                                                                                           





   


